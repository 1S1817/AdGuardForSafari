# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#
require 'pathname'
require 'tmpdir'
import "Subroutings"

before_all do |lane, options|

  config = ENV["CONFIGURATION"]
  if !options[:config].nil?; config = options[:config]; end
  load_project_vars(config)

  ENV["REPO_ROOT"]    = (Pathname.new(ENV["XPV_SRCROOT"])+'..').to_s
  ENV["BUILD_PATH"]   = "#{ENV['REPO_ROOT']}/#{ENV['BUILD_DIR']}"

  load_sensitive_vars(ENV["SENSITIVE_VARS_PATH"])

end

desc "Installs or updates certificates and provisioning profiles, which need for build product "
lane :certs do |options|

  if  ENV["MATCH_KEYCHAIN_PASSWORD"] == ""
    # Remove this key should force fastlane to request keychain password
    ENV.delete("MATCH_KEYCHAIN_PASSWORD")
  end

  app_id = ENV["XPV_PRODUCT_BUNDLE_IDENTIFIER"]
  real_project_config = ENV["XPV_CONFIGURATION"]

  keychain_path = nil

  if ENV["KEYCHAIN_PATH_LOCAL"] == 'true'

    keychain_path = "#{ENV['BUILD_PATH']}/certs/#{ENV['MATCH_KEYCHAIN_NAME']}"

    create_local_keychain(keychain_path)
    UI.success "Keychain path: #{keychain_path}"
  end

  if real_project_config == "Release"
    mas_cert("appstore", "mac_installer_distribution", app_id, keychain_path, options) 
  else
    standalone_certs(app_id, keychain_path, options)
  end

end

desc "Remove local keychain, which contains certificates"
lane :remove_certs do |options|

    step_name = "Remove local keychain, which contains certificates"
    keychain_path = "#{ENV['BUILD_PATH']}/certs/#{ENV['MATCH_KEYCHAIN_NAME']}"

  if !File.exist?(keychain_path)
    Actions.execute_action(step_name) do
      UI.success "No local keychain"
    end
    next
  end

  delete_keychain(
    keychain_path: keychain_path,
    step_name: step_name
  )
end

desc "Notarize bundle using default credentials"
desc "Required options:"
desc "  - bundle: STRING Path to bundle, must be defined relativelly to BUILD_DIR"
desc "  - id: STRING Bundle id, used for notary service"
lane :notari do |options|

  UI.user_error!("Missing argument: 'id:<BUNDLE_ID>'") if options[:id].nil?
  UI.user_error!("Missing argument: 'bundle:<BUNDLE_PATH_RELATIVE_TO_BUILD_DIR>'") if options[:bundle].nil?

  bundle_path = "#{ENV['BUILD_PATH']}/#{options[:bundle]}"
  bundle_id = options[:id]

  Dir.mktmpdir do |tempDir|
    notari_path = "#{tempDir}/to_notarize.zip"

    compress_bundle(bundle_path, notari_path)

    notarize(
      step_name: "Notarizing bundle",
      package: notari_path,
      use_notarytool: true,
      bundle_id: bundle_id,
      skip_stapling: true,
      print_log: true,
      verbose: true
    )

    staple_bundle(bundle_path)
  end 
end

desc "Submit app to MAS from Xcode archive (xcarchive)"
desc "Required options:"
desc "  - archive: STRING Path to Xcode archive"
lane :upload_to_mas do |options|

  app_id = ENV["XPV_PRODUCT_BUNDLE_IDENTIFIER"]
  identity = ENV["MAS_SUBMIT_INSTALLER_IDENTITY"]

  path = Pathname.new(options[:archive])
  path = Pathname.new(ENV["PWD"]) + path if path.relative?

  archive_path = path.realpath.to_s

  Dir.mktmpdir do |symbols_path|

    collect_symbols(archive_path, symbols_path)
    Dir.mktmpdir do |temp_dir|

      pkg_path = "#{temp_dir}/thePackage.pkg"
      create_pkg(identity, archive_path, symbols_path, pkg_path)

      submit_to_mas(app_id, pkg_path, ENV["XPV_DEVELOPMENT_TEAM"])

    end
  end 
end

ENV["FASTLANE_PROC"] = "true"
